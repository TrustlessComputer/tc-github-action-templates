name: Docker develop build

on:
  workflow_call:
    inputs:
      DOCKER_REGISTRY_HOST:
        required: false
        type: string
        default: 'gcr.io'
      DOCKER_IMAGE_PATH:
        required: false
        type: string
        default: 'trustless-computer-devops'
      DOCKER_IMAGE_NAME:
        required: true
        type: string
      DOCKERFILE_NAME:
        required: true
        type: string
        default: 'Dockerfile'
      DOCKER_CONTEXT:
        required: false
        type: string
        default: '.'
      DOCKER_BUILD_ENV:
        required: false
        type: string
        default: ''
      DOCKER_AUTOPUSH:
        required: false
        type: boolean
        default: true
      NEXT_UPLOAD_STATIC_ASSETS:
        required: false
        type: boolean
        default: false
      NEXT_UPLOAD_STATIC_ASSETS_DESTINATION:
        required: false
        type: string
        default: ''
      CONCURRENCY_GROUP:
        required: false
        type: string
        default: 'docker_build_and_push'
      RUNNER_TAG:
        required: false
        type: string
        default: 'ubuntu-latest'
    secrets:
      GCLOUD_DEV_SERVICE_ACCOUNT_JSON:
        required: true

jobs:
  build-and-push-to-gcr:
    runs-on: ${{inputs.RUNNER_TAG}}
    concurrency:
      group: ${{inputs.CONCURRENCY_GROUP}}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - name: Get the tag name
        id: get_tag_name
        run: |
          if [[ '${{inputs.DOCKER_BUILD_ENV}}' != '' ]]; then
            short_sha=$(echo $GITHUB_SHA | head -c 7)
            echo "BUILD_ENV=${{inputs.DOCKER_BUILD_ENV}}" >> $GITHUB_ENV
            echo "IMAGE_TAG=${GITHUB_REF_NAME}-${short_sha}" >> $GITHUB_ENV
            echo "CACHE_TO=" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_TYPE == 'branch' ]]; then
            short_sha=$(echo $GITHUB_SHA | head -c 7)
            echo "IMAGE_TAG=${GITHUB_REF_NAME}-${short_sha}" >> $GITHUB_ENV
            echo "BUILD_ENV=${GITHUB_REF_NAME}" >> $GITHUB_ENV
            echo "CACHE_TO=type=gha,mode=max" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
            echo "BUILD_ENV=production" >> $GITHUB_ENV
            echo "CACHE_TO=" >> $GITHUB_ENV
          fi

      - name: Setup google auth
        id: "auth"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCLOUD_DEV_SERVICE_ACCOUNT_JSON }}

      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - name: Authenticate docker
        run: |
          gcloud auth configure-docker --quiet gcr.io

      -
        name: Docker meta
        uses: docker/metadata-action@v5
        id: dockerMeta
        with:
          images: ${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}

      - name: Build and push
        id: dockerBuildAndPush
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.DOCKER_CONTEXT }}
          file: ${{ inputs.DOCKERFILE_NAME }}
          push: false
          labels: ${{ steps.dockerMeta.outputs.labels }}
          load: true
          tags: |
            ${{ inputs.DOCKER_REGISTRY_HOST }}/${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}:latest
            ${{ inputs.DOCKER_REGISTRY_HOST }}/${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: ${{ env.CACHE_TO }}
          build-args: |
            BUILD_ENV=${{ env.BUILD_ENV }}
            BUILD_TAG=${{ env.IMAGE_TAG }}


      - name: Copy assets from docker
        run: |
          mkdir _next
          tempContainer=$(docker create ${{ inputs.DOCKER_REGISTRY_HOST }}/${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }})
          docker cp $tempContainer:/app/.next/static ./_next/static
          docker rm -v $tempContainer
          ls -lra _next

      - name: Upload static assets
        id: 'upload-static-assets'
        uses: 'google-github-actions/upload-cloud-storage@v2'
        with:
          process_gcloudignore: false
          path: './_next'
          destination: '${{ inputs.NEXT_UPLOAD_STATIC_ASSETS_DESTINATION }}/${{ env.IMAGE_TAG }}/'

      - name: Push docker image to registry
        if: ${{ inputs.DOCKER_AUTOPUSH }}
        run: |
          docker push ${{ inputs.DOCKER_REGISTRY_HOST }}/${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ inputs.DOCKER_REGISTRY_HOST }}/${{ inputs.DOCKER_IMAGE_PATH }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
